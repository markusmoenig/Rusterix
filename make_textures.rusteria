
// Value noise, based on https://www.shadertoy.com/view/4dS3Wd
// By Morgan McGuire @morgan3d, http://graphicscodex.com
// Reuse permitted under the BSD license.

fn value_hash(p, scale) {
    p = mod(p, scale);
    let p3 = fract(p.xyx * 0.13); 
    p3 += dot(p3, p3.yzx + 3.333); 
    return fract((p3.x + p3.y) * p3.z); 
}

fn value_noise(x, scale) {
    x *= scale;

    let i = floor(x);
    let f = fract(x);

	let a = value_hash(i, scale);
    let b = value_hash(i + vec2(1.0, 0.0), scale);
    let c = value_hash(i + vec2(0.0, 1.0), scale);
    let d = value_hash(i + vec2(1.0, 1.0), scale);

    let u = f * f * (3.0 - 2.0 * f);
	return mix(a, b, u.x) + (c - a) * u.y * (1.0 - u.x) + (d - b) * u.x * u.y;
}

fn fbm_value(x, scale) {
	let v = 0.0;
	let a = 0.5;
	let shift = vec2(100);
	for (let i = 0; i < 5; i += 1) {
		v += a * value_noise(x, scale);
        x = rotate2d(x, 0.5) * 2.0 + shift;
		a *= 0.5;
	}
	return v;
}

fn make_value_noise() {
    color = value_noise(uv, 20);
}

fn make_fbm_value_noise() {
    color = fbm_value(uv, 20);
}

let tex = alloc(512, 512);
iterate(tex, "make_value_noise");
save(tex, "rusteria/embedded/value.png");

iterate(tex, "make_fbm_value_noise");
save(tex, "rusteria/embedded/fbm_value.png");

// Simplex noise, based on https://www.shadertoy.com/view/Msf3WH
// The MIT License
// Copyright Â© 2013 Inigo Quilez

fn simplex_hash( p, scale )
{
    //p = mod(p, scale);
	p = vec2( dot2(p,vec2(127.1,311.7)), dot2(p,vec2(269.5,183.3)) );
    let t = -1.0 + 2.0*fract(sin2(p)*43758.5453123);
    return vec3(t.x, t.y, 0.0);
}

fn simplex_noise( p, scale )
{
    //p *= scale;

    let K1 = 0.366025404; // (sqrt(3)-1)/2;
    let K2 = 0.211324865; // (3-sqrt(3))/6;

	let  i = floor( p + (p.x+p.y)*K1 );
    let  a = p - i + (i.x+i.y)*K2;
    let m = step(a.y,a.x); 
    let  o = vec2(m,1.0-m);
    let  b = a - o + K2;
	let  c = a - 1.0 + 2.0*K2;
    let  h = max( 0.5-vec3(dot2(a,a), dot2(b,b), dot2(c,c) ), 0.0 );
	let  n = h*h*h*h*vec3( dot2(a,simplex_hash(i+0.0, scale)), dot2(b,simplex_hash(i+o, scale)), dot2(c,simplex_hash(i+1.0, scale)));
    return 0.5 + dot( n, vec3(70.0) ) * 0.5;
}

fn make_simplex_noise() {
    color = simplex_noise(uv * 10.0, 1.0);
}

iterate(tex, "make_simplex_noise");
save(tex, "rusteria/embedded/simplex.png");
